name: macOS x86_64

on:
  pull_request:
    branches:
      - master
      - 3.4
      - 4.x
      - 5.x
    paths-ignore:
      - '.github/workflows/build_wheels_linux*'
      - '.github/workflows/build_wheels_windows*'
      - '.github/workflows/build_wheels_macos_m1.yml'
  release:
    types: [published, edited]
  schedule:
    - cron: '0 3 * * 6'
  workflow_dispatch:


jobs:
  Build:
    runs-on: macos-13
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9']
        platform: [x64]
        with_contrib: [0, 1]
        without_gui: [0, 1]
        build_sdist: [0]
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      REPO_DIR: .
      PROJECT_SPEC: opencv-python
      MB_PYTHON_VERSION: ${{ matrix.python-version }}
      TRAVIS_PYTHON_VERSION: ${{ matrix.python-version }}
      MB_ML_VER: 2014
      TRAVIS_BUILD_DIR: ${{ github.workspace }}
      TRAVIS_OS_NAME: osx
      CONFIG_PATH: travis_config.sh
      USE_CCACHE: 1
      UNICODE_WIDTH: 32
      PLAT: x86_64
      SDIST: ${{ matrix.build_sdist || 0 }}
      ENABLE_HEADLESS: ${{ matrix.without_gui }}
      ENABLE_CONTRIB: ${{ matrix.with_contrib }}
    steps:
    - name: Cleanup
      run: find . -mindepth 1 -delete
      working-directory: ${{ github.workspace }}
    - name: Setup environment
      run: |
        if [[ "${{ github.event_name }}" == "schedule" || "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "ENABLE_ROLLING=1" >> $GITHUB_ENV
        fi
        # hack for image issue on mac: https://github.com/actions/runner-images/issues/6817
        rm /usr/local/bin/2to3*
        rm /usr/local/bin/idle3*
        rm /usr/local/bin/pydoc3*
        rm /usr/local/bin/python3*
        # end hack
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: false
        fetch-depth: 0
    - name: Build a package
      run: |
        set -e
        # Check out and prepare the source
        # Multibuild doesn't have releases, so --depth would break eventually (see
        # https://superuser.com/questions/1240216/server-does-not-allow-request-for-unadvertised)
        git submodule update --init multibuild
        source multibuild/common_utils.sh
        # https://github.com/matthew-brett/multibuild/issues/116
        if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then export ARCH_FLAGS=" "; fi
        source multibuild/travis_steps.sh
        # This sets -x
        # source travis_multibuild_customize.sh
        echo $ENABLE_CONTRIB > contrib.enabled
        echo $ENABLE_HEADLESS > headless.enabled
        set -x
        build_wheel $REPO_DIR $PLAT
    - name: Saving all wheels
      uses: actions/upload-artifact@v3
      with:
        name: wheels
        path: wheelhouse/opencv*.whl
    - name: Saving a wheel accordingly to matrix
      uses: actions/upload-artifact@v3
      with:
        name: wheel-${{ matrix.with_contrib }}-${{ matrix.without_gui }}-${{ matrix.build_sdist }}
        path: wheelhouse/opencv*.whl

  Test:
    needs: [Build]
    runs-on: macos-13
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11', '3.12', '3.13']
        platform: [x64]
        with_contrib: [0, 1]
        without_gui: [0, 1]
        build_sdist: [0]
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      MB_PYTHON_VERSION: ${{ matrix.python-version }}
      NP_TEST_DEP: numpy==1.19.4
      NP_TEST_DEP_LATEST: numpy==2.2.1
      CONFIG_PATH: travis_config.sh
      PLAT: x86_64
      OPENCV_TEST_DATA_PATH: ${{ github.workspace }}/opencv_extra/testdata
      PYLINT_TEST_FILE: ${{ github.workspace }}/opencv/samples/python/squares.py
    steps:
    - name: Cleanup
      run: find . -mindepth 1 -delete
      working-directory: ${{ github.workspace }}
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: true
        fetch-depth: 0
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.platform }}
    - name: Setup Environment variables
      run: if ["3.10" == "${{ matrix.python-version }}" -o "3.11" == "${{ matrix.python-version }}" -o "3.12" == "${{ matrix.python-version }}" -o "3.13" == "${{ matrix.python-version }}" ]; then echo "TEST_DEPENDS=$(echo $NP_TEST_DEP_LATEST)" >> $GITHUB_ENV; else echo "TEST_DEPENDS=$(echo $NP_TEST_DEP)" >> $GITHUB_ENV; fi
    - name: Download a wheel accordingly to matrix
      uses: actions/download-artifact@v3
      with:
        name: wheel-${{ matrix.with_contrib }}-${{ matrix.without_gui }}-${{ matrix.build_sdist }}
        path: wheelhouse/
    - name: Package installation
      run: |
        python -m pip install wheelhouse/opencv*.whl
        cd ${{ github.workspace }}/tests
        python get_build_info.py
    - name: Run tests
      run: |
        cd ${{ github.workspace }}/opencv
        python modules/python/test/test.py -v --repo .
    - name: Pylint test
      run: |
        python -m pip install pylint==2.15.9
        cd ${{ github.workspace }}/tests
        python -m pylint $PYLINT_TEST_FILE

  Release_rolling:
    if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
    needs: [Build, Test]
    runs-on: ubuntu-20.04
    environment: opencv-python-rolling-release
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
          path: wheelhouse/
      - name: Upload wheels for opencv_python_rolling
        run: |
          python -m pip install twine
          python -m twine upload -u ${{ secrets.OPENCV_PYTHON_ROLLING_USERNAME }} -p ${{ secrets.OPENCV_PYTHON_ROLLING_PASSWORD }} --skip-existing wheelhouse/opencv_python_rolling-*
      - name: Upload wheels for opencv_contrib_python_rolling
        run: |
          python -m pip install twine
          python -m twine upload -u ${{ secrets.OPENCV_CONTRIB_PYTHON_ROLLING_USERNAME }} -p ${{ secrets.OPENCV_CONTRIB_PYTHON_ROLLING_PASSWORD }} --skip-existing wheelhouse/opencv_contrib_python_rolling-*
      - name: Upload wheels for opencv_python_headless_rolling
        run: |
          python -m pip install twine
          python -m twine upload -u ${{ secrets.OPENCV_PYTHON_HEADLESS_ROLLING_USERNAME }} -p ${{ secrets.OPENCV_PYTHON_HEADLESS_ROLLING_PASSWORD }} --skip-existing wheelhouse/opencv_python_headless_rolling-*
      - name: Upload wheels for opencv_contrib_python_headless_rolling
        run: |
          python -m pip install twine
          python -m twine upload -u ${{ secrets.OPENCV_CONTRIB_PYTHON_HEADLESS_ROLLING_USERNAME }} -p ${{ secrets.OPENCV_CONTRIB_PYTHON_HEADLESS_ROLLING_PASSWORD }} --skip-existing wheelhouse/opencv_contrib_python_headless_rolling-*

  Pre-release:
    if: github.event_name == 'release' && github.event.release.prerelease
    needs: [Build, Test]
    runs-on: ubuntu-20.04
    environment: test-opencv-python-release
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
          path: wheelhouse/
      - name: Upload all wheels
        run: |
          python -m pip install twine
          python -m twine upload --repository testpypi -u ${{ secrets.PYPI_USERNAME }} -p ${{ secrets.PYPI_PASSWORD }} --skip-existing wheelhouse/opencv_*

  Release:
    if: github.event_name == 'release' && !github.event.release.prerelease
    needs: [Build, Test]
    runs-on: ubuntu-20.04
    environment: opencv-python-release
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
          path: wheelhouse/
      - name: Upload wheels for opencv_python
        run: |
          python -m pip install twine
          python -m twine upload -u ${{ secrets.OPENCV_PYTHON_USERNAME }} -p ${{ secrets.OPENCV_PYTHON_PASSWORD }} --skip-existing wheelhouse/opencv_python-*
      - name: Upload wheels for opencv_contrib_python
        run: |
          python -m pip install twine
          python -m twine upload -u ${{ secrets.OPENCV_CONTRIB_PYTHON_USERNAME }} -p ${{ secrets.OPENCV_CONTRIB_PYTHON_PASSWORD }} --skip-existing wheelhouse/opencv_contrib_python-*
      - name: Upload wheels for opencv_python_headless
        run: |
          python -m pip install twine
          python -m twine upload -u ${{ secrets.OPENCV_PYTHON_HEADLESS_USERNAME }} -p ${{ secrets.OPENCV_PYTHON_HEADLESS_PASSWORD }} --skip-existing wheelhouse/opencv_python_headless-*
      - name: Upload wheels for opencv_contrib_python_headless
        run: |
          python -m pip install twine
          python -m twine upload -u ${{ secrets.OPENCV_CONTRIB_PYTHON_HEADLESS_USERNAME }} -p ${{ secrets.OPENCV_CONTRIB_PYTHON_HEADLESS_PASSWORD }} --skip-existing wheelhouse/opencv_contrib_python_headless-*
